pragma solidity ^0.4.0;

contract ClientReceipt {
    event Deposit(
        address indexed _from,
        bytes32 indexed _id,
        uint _value
    );

    function deposit(bytes32 _id) payable {
        // Any call to this function (even deeply nested) can
        // be detected from the JavaScript API by filtering
        // for `Deposit` to be called.
        Deposit(msg.sender, _id, msg.value);
    }
}

/*
//var abi = //abi as generated by the compiler;
var ClientReceipt = web3.eth.contract(abi);
var clientReceipt = ClientReceipt.at("0x1234...ab67"); // address

var event = clientReceipt.Deposit();

// watch for changes
event.watch(function(error, result){
    // result will contain various information
    // including the argumets given to the Deposit
    // call.


    if (!error)
        console.log(result);
});

// Or pass a callback to start watching immediately
var event = clientReceipt.Deposit(function(error, result) {


    if (!error)
        console.log(result);
});


log3(
    msg.value,
    0x50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb20,
    msg.sender,
    _id
);

where the long hexadecimal number is equal to keccak256("Deposit(address,hash256,uint256)"), the signature of the event.


import "owned";

contract SmartExchange is owned {
    event AnonymousDeposit(address indexed from, uint value);
    event Deposit(address indexed from, bytes32 indexed to, uint value);
    event Transfer(bytes32 indexed from, address indexed to, uint value);
    event IcapTransfer(bytes32 indexed from, address indexed to, bytes32 indirectId, uint value);

    function () {
        AnonymousDeposit(msg.sender, msg.value);
    }

    function deposit(bytes32 to) {
        Deposit(msg.sender, to, msg.value);
    }

    function transfer(bytes32 from, address to, uint value) onlyowner {
        to.send(value);
        Transfer(from, to, value);
    }

    function icapTransfer(bytes32 from, address to, bytes32 indirectId, uint value) onlyowner {
        SmartExchange(to).deposit.value(value)(indirectId); // value?
        IcapTransfer(from, to, indirectId, value);
    }
}

